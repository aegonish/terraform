import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl
import com.cloudbees.plugins.credentials.impl.FileCredentialsImpl
import hudson.util.Secret

def store = Jenkins.instance.getExtensionList(
    'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
)[0].getStore()
def domain = Domain.global()

def creds = [
    [
        id: 'github-pat',
        desc: 'GitHub access token for Jenkins',
        username: '{{ vault_github_username }}',
        password: '{{ vault_github_pat }}',
        type: 'usernamePassword'
    ],
    [
        id: 'dockerhub-credentials',
        desc: 'Credentials for DockerHub in Jenkins',
        username: 'aegonishblog',
        password: '{{ vault_dockerhub_password }}',
        type: 'usernamePassword'
    ],
    [
        id: 'aws-creds',
        desc: 'AWS credentials for ECR',
        accessKey: '{{ vault_aws_access_key }}',
        secretKey: '{{ vault_aws_secret_key }}',
        type: 'aws'
    ],
    [
        id: 'env-file',
        desc: 'Environment file for aegonish-blog',
        secret: '{{ vault_env_file | b64encode }}',
        type: 'string'
    ]
]

creds.each { c ->
    def existing = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
        com.cloudbees.plugins.credentials.common.StandardCredentials.class,
        Jenkins.instance,
        null,
        null
    ).find { it.id == c.id }

    if (existing) {
        println "Skipping ${c.id} (already exists)"
        return
    }

    def credential
    switch (c.type) {
        case 'usernamePassword':
            credential = new UsernamePasswordCredentialsImpl(
                CredentialsScope.GLOBAL, c.id, c.desc,
                c.username, c.password
            )
            break
        case 'aws':
            credential = new AWSCredentialsImpl(
                CredentialsScope.GLOBAL, c.id, c.desc,
                c.accessKey, Secret.fromString(c.secretKey),
                null, false
            )
            break
        case 'string':
            credential = new StringCredentialsImpl(
                CredentialsScope.GLOBAL, c.id, c.desc,
                Secret.fromString(c.secret)
            )
            break
    }

    store.addCredentials(domain, credential)
    println "âœ… Created credential: ${c.id}"
}
