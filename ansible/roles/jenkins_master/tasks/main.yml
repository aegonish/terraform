---
- name: Ensure Git is installed (safe fallback for Amazon Linux)
  become: yes
  shell: |
    if ! command -v git >/dev/null 2>&1; then
      yum install -y git || dnf install -y git || amazon-linux-extras install git -y
    else
      echo "Git already installed"
    fi
  args:
    executable: /bin/bash
  register: git_install
  changed_when: "'already installed' not in git_install.stdout"

- name: Install Java 17 (required for Jenkins)
  shell: |
    amazon-linux-extras install java-openjdk17 -y || yum install -y java-17-amazon-corretto

- name: Add Jenkins repo
  get_url:
    url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
    dest: /etc/yum.repos.d/jenkins.repo

- name: Import Jenkins key
  rpm_key:
    state: present
    key: https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key

- name: Install Jenkins
  shell: yum install -y jenkins
  register: install_output
  changed_when: "'Nothing to do' not in install_output.stdout"

- name: Set Jenkins Java path to Corretto 17
  lineinfile:
    path: /etc/sysconfig/jenkins
    regexp: '^JAVA_HOME='
    line: 'JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto'
    create: yes
  notify: Restart Jenkins

# üîß Disable CSRF protection and ensure admin realm is configured for automation
- name: Allow Jenkins automation API (disable CSRF temporarily)
  become: yes
  lineinfile:
    path: /etc/sysconfig/jenkins
    regexp: '^JENKINS_ARGS='
    line: >-
      JENKINS_ARGS="--argumentsRealm.passwd.aegonish={{ jenkins_admin_password }}
      --argumentsRealm.roles.aegonish=admin --httpPort=8080 --csrfProtection=false"
  notify: Restart Jenkins

  # üîÅ Restart Jenkins after disabling CSRF (so it takes effect)
- name: Restart Jenkins to apply CSRF disable
  become: true
  systemd:
    name: jenkins
    state: restarted

# Wait for Jenkins to restart and become ready
- name: Wait for Jenkins to be ready after CSRF change
  uri:
    url: http://localhost:8080/login
    status_code: 200
  register: jenkins_after_csrf
  retries: 15
  delay: 10
  until: jenkins_after_csrf.status == 200


# üîß Create minimal script approval file so Groovy via API works
- name: Ensure script approval file exists
  become: yes
  copy:
    dest: /var/lib/jenkins/scriptApproval.xml
    content: |
      <scriptApproval plugin="script-security@1271.vfe18c1e88cc8">
        <approvedScriptHashes/>
        <approvedSignatures/>
        <aclApprovedSignatures/>
        <approvedClasspathEntries/>
      </scriptApproval>
    owner: jenkins
    group: jenkins
    mode: '0644'

- name: Enable and start Jenkins service
  systemd:
    name: jenkins
    enabled: yes
    state: started

# Wait for Jenkins service to be ready
- name: Wait for Jenkins service to be ready
  uri:
    url: http://localhost:8080/login
    status_code: 200
  register: result
  retries: 10
  delay: 10
  until: result.status == 200

# Copy plugin list to remote
- name: Copy plugins list
  copy:
    src: plugins.txt
    dest: /var/lib/jenkins/plugins.txt
    owner: jenkins
    group: jenkins
    mode: '0644'

# Ensure facts are loaded
- name: Gather facts again
  setup:

# Download and set up the Jenkins Plugin CLI
- name: Ensure jenkins-plugin-cli is available
  become: true
  shell: |
    mkdir -p /opt/jenkins-cli
    curl -fsSL -o /opt/jenkins-cli/plugin-installation-manager.jar \
      https://repo.jenkins-ci.org/releases/io/jenkins/plugin-management/plugin-installation-manager-tool/2.13.2/plugin-installation-manager-tool-2.13.2.jar
    cat <<'EOF' > /usr/local/bin/jenkins-plugin-cli
    #!/bin/bash
    exec java -jar /opt/jenkins-cli/plugin-installation-manager.jar "$@"
    EOF
    chmod +x /usr/local/bin/jenkins-plugin-cli
  args:
    executable: /bin/bash

# Ensure Jenkins plugin directory exists
- name: Ensure Jenkins plugins directory exists
  file:
    path: /var/lib/jenkins/plugins
    state: directory
    owner: jenkins
    group: jenkins
    mode: '0755'

# Install all plugins safely and explicitly into Jenkins home
- name: Install Jenkins plugins (safe iterative install)
  become: true
  shell: |
    set -e
    while read -r plugin; do
      [ -z "$plugin" ] && continue
      echo "Installing plugin: $plugin"
      /usr/local/bin/jenkins-plugin-cli --plugins "$plugin" -d /var/lib/jenkins/plugins
    done < /var/lib/jenkins/plugins.txt
  args:
    executable: /bin/bash
  environment:
    JENKINS_UC: "https://updates.jenkins.io"
    JENKINS_HOME: "/var/lib/jenkins"
  register: plugin_install
  changed_when: "'Installing plugin:' in plugin_install.stdout"
  tags:
    - jenkins_plugins

# Fix permissions on plugin directory
- name: Fix ownership and permissions on Jenkins plugins
  become: true
  file:
    path: /var/lib/jenkins/plugins
    owner: jenkins
    group: jenkins
    recurse: yes

# ===============================================================
# Disable CSRF protection & enable script execution via API
# ===============================================================
- name: Disable Jenkins CSRF protection and enable script console via API
  become: true
  lineinfile:
    path: /etc/sysconfig/jenkins
    regexp: '^JENKINS_ARGS='
    line: 'JENKINS_ARGS="--webroot=%C/jenkins/war --httpPort=8080 --csrfProtection=false --argumentsRealm.passwd.aegonish=Anishk@78995 --argumentsRealm.roles.aegonish=admin"'
  notify: Restart Jenkins

# Restart Jenkins to activate plugins
- name: Restart Jenkins to load new plugins
  become: true
  systemd:
    name: jenkins
    state: restarted

# Wait until Jenkins comes back online
- name: Wait for Jenkins to come back online
  uri:
    url: http://localhost:8080/login
    status_code: 200
    timeout: 120
  register: jenkins_up
  retries: 12
  delay: 10
  until: jenkins_up.status == 200

# Show initial password (if exists)
- name: Print Jenkins initial admin password
  command: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: admin_pass
  failed_when: false
  changed_when: false

- debug:
    msg: "Jenkins initial admin password: {{ admin_pass.stdout | default('Already initialized or file missing') }}"
